						面向对象汇总
	什么是对象？
 一切皆对象。对象即类的实例，类是具有相同属性的对象的集合。
	面向对象的特征有哪些，
什么是面向对象：面向对象就是将实例事物的属性和方法放到一个类中，具体就是把一个对象的静态特征和动态特征抽象成属性和方法
也就是把一类事物的算法和数据结构封装在一个类中。 
面向对象的三大特征，封装，继承，多态
	什么是封装，
即隐藏对象的属性和实现细节，仅对外公开接口，控制在程序中属性的读和修改的访问级别
将抽象得到的数据和行为相结合，形成一个有机的整体，将数据和操作数据的源代码进行有机的结合
封装的作用：提高代码的复用性。不必关心具体的实现，具有一定的安全性
	什么是继承
继承发生在父子类中，直接使用另一个对象的属性和方法。
	什么是抽类：将不同的数据类型的集合组成一个整体用来描述一种新的事物。
类不但定义了抽象类型的组成，同时还定义了对该类型实施的操作。即类包含属性和方法
方法即为对象的行为，封装对象的功能
	除8中基本类型外，用类，接口，数组等声明的变量都称为引用类型变量。简称引用
java中无论代码还是数据，都需要存储在内存中，jvm开辟了堆，栈，方法区。
堆：中用于存储所有new出来的对象。声明周期，对象创建到对象被回收，当一个对象没有任何引用对象的时候
视为废弃对象属于回收的范围
栈内存：用于存储程序运行时在方法中声明的所有局部变量。
局部变量和成员变量
 成员变量定义在类中方法外，有默认值，对象回收时，成员变量失效
 局部变量定义在方法中，无默认值，必须初始化才能使用，方法调用结束时，局部变量失效。
方法区存放类的信息。java运行时，会通过类加载器加载字节码文件。经过解析后将其装入方法区中，
类中各种信息都存储在方法区中。实例对象共用在方法区总的一份定义的。
	extends
通过extends关键字实现类的继承。可以继承成员变量和方法。同时也可以定义自己的成员变量和方法。
父类如果没有无参构造器，子类就不能通过super（），关键字调用父类的构造方法会有编译错误。
	继承引出了向上造型：
	即 父类型的引用指向子类的对象。访问的只能是子类继承父类的成员。
	重写：发生在父子类中。重写方法被调用时都是运行子类中的方法。
	子类在重写时可以通过super调用父类的版本
	重载遵循编译器绑定，重写遵循运行期绑定

static修饰的不属于类的数据结构，存在于方法区，一个static成员只有一份
final修饰词：修饰成员变量。可以在定义时初始化也可以在构造器中初始化
修饰局部变量，使用时初始化即可
修饰的类不能被继承，意味不可改变的。
static final 常量 。 编译期被替换
抽象类和抽象方法
	由abstract修饰的类叫抽象类。包含抽象方法的类一定是抽象类，抽象类不一定包含抽象方法
抽象类不能被实例化。
	抽象类的意义；为其子类提供一个公共的类型
			封装子类中重复的内容，成员变量和方法
			抽象方法被继承时，不同的子类有不同的实现，但定义是一致的。
	接口，即特定的抽象类，全包含抽象方法的类。
接口可以做为一种类型，声明变量。一个接口的变量可以引用实现了该接口的类。
即多态。类的多种表现形式，通过该引用可以调用接口类中定义的被实现类实现的方法
接口和抽象类的区别：
	接口中只能是抽象方法，而抽象类中，可以有抽象方法也可以没有，
	接口只能被类实现，不能被类继承，抽象类可以被继承，不能被实现。
	都不能直接被实例化。要实例化，必须指向实现了所有抽象方法的实现类。
	接口中只能做方法声明不能做方法实现。
	接口中定义的变量只能是公共的常量。抽象类中定义的变量时普通变量
	抽象类的抽象方法必须全部被子类所实现，如果不能，子类只能是抽象类。
	接口的方法如果不能被子类全部实现，那么该类也只能是抽象类
	抽象方法只能声明，不能实现，接口是设计的结果，抽象类是重构的结果。
	接口可以多继承接口，但类只能单根继承
接口和抽象类都是用来抽象具体对象的，但是接口的抽象级别最高
抽象类可以有具体的方法和属性。接口只能有抽象方法和常量
接口主要用来抽象功能，抽象类主要用来抽象类别。
接口中所有方法都是未实现的。
	使用区别
	当关注一个事物的本质的时候，用抽象类；当关注一个操作的时候，用接口
抽象类的功能远超过接口，但是，定义抽象类的代价高，因为高级语言来说，每个类只能继承一个类
在这个类中你必须编写出其所有子类的所有共性。
	
	



















